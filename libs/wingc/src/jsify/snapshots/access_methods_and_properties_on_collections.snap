---
source: libs/wingc/src/jsify/tests.rs
---
## Code

```w

    let x = [1,2,3];
    let y = ["hello"];

    test "test" {
      assert(x.length == 3);
      assert(y.at(0) == "hello");
    }
    
```

## inflight.$Closure1-1.js

```js
"use strict";
module.exports = function({ $__obj__args_______if__args_0____0____args_0_____y_length__throw_new_Error__Index_out_of_bounds____return_obj_args_0_______y___0__, $x_length }) {
  class $Closure1 {
    constructor({  }) {
      const $obj = (...args) => this.handle(...args);
      Object.setPrototypeOf($obj, this);
      return $obj;
    }
    async handle() {
      {((cond) => {if (!cond) throw new Error("assertion failed: x.length == 3")})((((a,b) => { try { return require('assert').deepStrictEqual(a,b) === undefined; } catch { return false; } })($x_length,3)))};
      {((cond) => {if (!cond) throw new Error("assertion failed: y.at(0) == \"hello\"")})((((a,b) => { try { return require('assert').deepStrictEqual(a,b) === undefined; } catch { return false; } })($__obj__args_______if__args_0____0____args_0_____y_length__throw_new_Error__Index_out_of_bounds____return_obj_args_0_______y___0__,"hello")))};
    }
  }
  return $Closure1;
}
```

## preflight.js

```js
"use strict";
const $stdlib = require('@winglang/sdk');
const $plugins = ((s) => !s ? [] : s.split(';'))(process.env.WING_PLUGIN_PATHS);
const $outdir = process.env.WING_SYNTH_DIR ?? ".";
const $wing_is_test = process.env.WING_IS_TEST === "true";
const std = $stdlib.std;
class $Root extends $stdlib.std.Resource {
  constructor($scope, $id) {
    super($scope, $id);
    class $Closure1 extends $stdlib.std.Resource {
      constructor($scope, $id, ) {
        super($scope, $id);
        (std.Node.of(this)).hidden = true;
      }
      static _toInflightType(context) {
        return `
          require("./inflight.$Closure1-1.js")({
            $__obj__args_______if__args_0____0____args_0_____y_length__throw_new_Error__Index_out_of_bounds____return_obj_args_0_______y___0__: ${context._lift(((obj, args) => { if (args[0] < 0 || args[0] >= y.length) throw new Error("Index out of bounds"); return obj[args[0]]; })(y, [0]))},
            $x_length: ${context._lift(x.length)},
          })
        `;
      }
      _toInflight() {
        return `
          (await (async () => {
            const $Closure1Client = ${$Closure1._toInflightType(this)};
            const client = new $Closure1Client({
            });
            if (client.$inflight_init) { await client.$inflight_init(); }
            return client;
          })())
        `;
      }
      _supportedOps() {
        return ["handle", "$inflight_init"];
      }
      _registerOnLift(host, ops) {
        if (ops.includes("handle")) {
          $Closure1._registerOnLiftObject(((obj, args) => { if (args[0] < 0 || args[0] >= y.length) throw new Error("Index out of bounds"); return obj[args[0]]; })(y, [0]), host, []);
          $Closure1._registerOnLiftObject(x.length, host, []);
        }
        super._registerOnLift(host, ops);
      }
    }
    const x = [1, 2, 3];
    const y = ["hello"];
    this.node.root.new("@winglang/sdk.std.Test",std.Test,this, "test:test", new $Closure1(this, "$Closure1"));
  }
}
const $App = $stdlib.core.App.for(process.env.WING_TARGET);
new $App({ outdir: $outdir, name: "main", rootConstruct: $Root, plugins: $plugins, isTestEnvironment: $wing_is_test, entrypointDir: process.env['WING_SOURCE_DIR'], rootId: process.env['WING_ROOT_ID'] }).synth();
```

